   1  void function shellSort(int size, int vetor[size]) {

          [0001, 0001] (0007,             typeVoid) {void}
          [0001, 0006] (0019,             funcDecl) {function}
          [0001, 0015] (0001,           identifier) {shellSort}
          [0001, 0024] (0045,           paramBegin) {(}
          [0001, 0025] (0002,              typeInt) {int}
          [0001, 0029] (0001,           identifier) {size}
          [0001, 0033] (0022,             commaSep) {,}
          [0001, 0035] (0002,              typeInt) {int}
          [0001, 0039] (0001,           identifier) {vetor}
          [0001, 0044] (0047,           arrayBegin) {[}
          [0001, 0045] (0001,           identifier) {size}
          [0001, 0049] (0048,             arrayEnd) {]}
          [0001, 0050] (0046,             paramEnd) {)}
          [0001, 0052] (0049,           scopeBegin) {{}
   2  

   3      int i;

          [0003, 0005] (0002,              typeInt) {int}
          [0003, 0009] (0001,           identifier) {i}
          [0003, 0010] (0021,            semicolon) {;}
   4      int j;

          [0004, 0005] (0002,              typeInt) {int}
          [0004, 0009] (0001,           identifier) {j}
          [0004, 0010] (0021,            semicolon) {;}
   5      int value;

          [0005, 0005] (0002,              typeInt) {int}
          [0005, 0009] (0001,           identifier) {value}
          [0005, 0014] (0021,            semicolon) {;}
   6  

   7      int h = 1;

          [0007, 0005] (0002,              typeInt) {int}
          [0007, 0009] (0001,           identifier) {h}
          [0007, 0011] (0028,                opAtt) {=}
          [0007, 0013] (0008,               intVal) {1}
          [0007, 0014] (0021,            semicolon) {;}
   8      while(h < size) {

          [0008, 0005] (0015,             cmdWhile) {while}
          [0008, 0010] (0045,           paramBegin) {(}
          [0008, 0011] (0001,           identifier) {h}
          [0008, 0013] (0032,           opLessThan) {<}
          [0008, 0015] (0001,           identifier) {size}
          [0008, 0019] (0046,             paramEnd) {)}
          [0008, 0021] (0049,           scopeBegin) {{}
   9          for(i = h; i < size; i = i + 1) {

          [0009, 0009] (0014,               cmdFor) {for}
          [0009, 0012] (0045,           paramBegin) {(}
          [0009, 0013] (0001,           identifier) {i}
          [0009, 0015] (0028,                opAtt) {=}
          [0009, 0017] (0001,           identifier) {h}
          [0009, 0018] (0021,            semicolon) {;}
          [0009, 0020] (0001,           identifier) {i}
          [0009, 0022] (0032,           opLessThan) {<}
          [0009, 0024] (0001,           identifier) {size}
          [0009, 0028] (0021,            semicolon) {;}
          [0009, 0030] (0001,           identifier) {i}
          [0009, 0032] (0028,                opAtt) {=}
          [0009, 0034] (0001,           identifier) {i}
          [0009, 0036] (0035,                opAdd) {+}
          [0009, 0038] (0008,               intVal) {1}
          [0009, 0039] (0046,             paramEnd) {)}
          [0009, 0041] (0049,           scopeBegin) {{}
  10              value = vetor[i];

          [0010, 0013] (0001,           identifier) {value}
          [0010, 0019] (0028,                opAtt) {=}
          [0010, 0021] (0001,           identifier) {vetor}
          [0010, 0026] (0047,           arrayBegin) {[}
          [0010, 0027] (0001,           identifier) {i}
          [0010, 0028] (0048,             arrayEnd) {]}
          [0010, 0029] (0021,            semicolon) {;}
  11              j = i;

          [0011, 0013] (0001,           identifier) {j}
          [0011, 0015] (0028,                opAtt) {=}
          [0011, 0017] (0001,           identifier) {i}
          [0011, 0018] (0021,            semicolon) {;}
  12              while(j > h - 1 && value <= vetor[j - h]) {

          [0012, 0013] (0015,             cmdWhile) {while}
          [0012, 0018] (0045,           paramBegin) {(}
          [0012, 0019] (0001,           identifier) {j}
          [0012, 0021] (0031,            opGtrThan) {>}
          [0012, 0023] (0001,           identifier) {h}
          [0012, 0025] (0036,                opSub) {-}
          [0012, 0027] (0008,               intVal) {1}
          [0012, 0029] (0024,                opAnd) {&&}
          [0012, 0032] (0001,           identifier) {value}
          [0012, 0038] (0034,             opLessEq) {<=}
          [0012, 0041] (0001,           identifier) {vetor}
          [0012, 0046] (0047,           arrayBegin) {[}
          [0012, 0047] (0001,           identifier) {j}
          [0012, 0049] (0036,                opSub) {-}
          [0012, 0051] (0001,           identifier) {h}
          [0012, 0052] (0048,             arrayEnd) {]}
          [0012, 0053] (0046,             paramEnd) {)}
          [0012, 0055] (0049,           scopeBegin) {{}
  13                  vetor[j] = vetor [j - h];

          [0013, 0017] (0001,           identifier) {vetor}
          [0013, 0022] (0047,           arrayBegin) {[}
          [0013, 0023] (0001,           identifier) {j}
          [0013, 0024] (0048,             arrayEnd) {]}
          [0013, 0026] (0028,                opAtt) {=}
          [0013, 0028] (0001,           identifier) {vetor}
          [0013, 0034] (0047,           arrayBegin) {[}
          [0013, 0035] (0001,           identifier) {j}
          [0013, 0037] (0036,                opSub) {-}
          [0013, 0039] (0001,           identifier) {h}
          [0013, 0040] (0048,             arrayEnd) {]}
          [0013, 0041] (0021,            semicolon) {;}
  14                  j = j - h;

          [0014, 0017] (0001,           identifier) {j}
          [0014, 0019] (0028,                opAtt) {=}
          [0014, 0021] (0001,           identifier) {j}
          [0014, 0023] (0036,                opSub) {-}
          [0014, 0025] (0001,           identifier) {h}
          [0014, 0026] (0021,            semicolon) {;}
  15              }

          [0015, 0013] (0050,             scopeEnd) {}}
  16              vetor[j] = value;

          [0016, 0013] (0001,           identifier) {vetor}
          [0016, 0018] (0047,           arrayBegin) {[}
          [0016, 0019] (0001,           identifier) {j}
          [0016, 0020] (0048,             arrayEnd) {]}
          [0016, 0022] (0028,                opAtt) {=}
          [0016, 0024] (0001,           identifier) {value}
          [0016, 0029] (0021,            semicolon) {;}
  17          }

          [0017, 0009] (0050,             scopeEnd) {}}
  18          h = h / 3;

          [0018, 0009] (0001,           identifier) {h}
          [0018, 0011] (0028,                opAtt) {=}
          [0018, 0013] (0001,           identifier) {h}
          [0018, 0015] (0039,                opDiv) {/}
          [0018, 0017] (0008,               intVal) {3}
          [0018, 0018] (0021,            semicolon) {;}
  19      }

          [0019, 0005] (0050,             scopeEnd) {}}
  20  

  21      for(i = 0; i < size/ i = i + 1) {

          [0021, 0005] (0014,               cmdFor) {for}
          [0021, 0008] (0045,           paramBegin) {(}
          [0021, 0009] (0001,           identifier) {i}
          [0021, 0011] (0028,                opAtt) {=}
          [0021, 0013] (0008,               intVal) {0}
          [0021, 0014] (0021,            semicolon) {;}
          [0021, 0016] (0001,           identifier) {i}
          [0021, 0018] (0032,           opLessThan) {<}
          [0021, 0020] (0001,           identifier) {size}
          [0021, 0024] (0039,                opDiv) {/}
          [0021, 0026] (0001,           identifier) {i}
          [0021, 0028] (0028,                opAtt) {=}
          [0021, 0030] (0001,           identifier) {i}
          [0021, 0032] (0035,                opAdd) {+}
          [0021, 0034] (0008,               intVal) {1}
          [0021, 0035] (0046,             paramEnd) {)}
          [0021, 0037] (0049,           scopeBegin) {{}
  22          print("%d ", vetor[i])

          [0022, 0009] (0044,            funcPrint) {print}
          [0022, 0014] (0045,           paramBegin) {(}
          [0022, 0015] (0012,            stringVal) {"%d "}
          [0022, 0020] (0022,             commaSep) {,}
          [0022, 0022] (0001,           identifier) {vetor}
          [0022, 0027] (0047,           arrayBegin) {[}
          [0022, 0028] (0001,           identifier) {i}
          [0022, 0029] (0048,             arrayEnd) {]}
          [0022, 0030] (0046,             paramEnd) {)}
  23      }

          [0023, 0005] (0050,             scopeEnd) {}}
  24    

  25  }

          [0025, 0001] (0050,             scopeEnd) {}}
  26  

  27  int function main() {

          [0027, 0001] (0002,              typeInt) {int}
          [0027, 0005] (0019,             funcDecl) {function}
          [0027, 0014] (0013,                 main) {main}
          [0027, 0018] (0045,           paramBegin) {(}
          [0027, 0019] (0046,             paramEnd) {)}
          [0027, 0021] (0049,           scopeBegin) {{}
  28    int qnt;

          [0028, 0003] (0002,              typeInt) {int}
          [0028, 0007] (0001,           identifier) {qnt}
          [0028, 0010] (0021,            semicolon) {;}
  29    input(qnt);

          [0029, 0003] (0043,             funcRead) {input}
          [0029, 0008] (0045,           paramBegin) {(}
          [0029, 0009] (0001,           identifier) {qnt}
          [0029, 0012] (0046,             paramEnd) {)}
          [0029, 0013] (0021,            semicolon) {;}
  30    shellSort(qnt);

          [0030, 0003] (0001,           identifier) {shellSort}
          [0030, 0012] (0045,           paramBegin) {(}
          [0030, 0013] (0001,           identifier) {qnt}
          [0030, 0016] (0046,             paramEnd) {)}
          [0030, 0017] (0021,            semicolon) {;}
  31    

  32    return 0;

          [0032, 0003] (0020,              funcRtn) {return}
          [0032, 0010] (0008,               intVal) {0}
          [0032, 0011] (0021,            semicolon) {;}
  33  }
          [0033, 0001] (0050,             scopeEnd) {}}
  34  EOF
          [0034, 0001] (0052,                  EOF) {}
