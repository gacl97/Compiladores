   1  void function fibonacci(int num) {
          [0001, 0001] (0007,             typeVoid) {void}
          [0001, 0006] (0019,             funcDecl) {function}
          [0001, 0015] (0001,           identifier) {fibonacci}
          [0001, 0024] (0045,           paramBegin) {(}
          [0001, 0025] (0002,              typeInt) {int}
          [0001, 0029] (0001,           identifier) {num}
          [0001, 0032] (0046,             paramEnd) {)}
          [0001, 0034] (0049,           scopeBegin) {{}
   2    if(num == 0) {
          [0002, 0003] (0016,                cmdIf) {if}
          [0002, 0005] (0045,           paramBegin) {(}
          [0002, 0006] (0001,           identifier) {num}
          [0002, 0010] (0029,             opEquals) {==}
          [0002, 0013] (0008,               intVal) {0}
          [0002, 0014] (0046,             paramEnd) {)}
          [0002, 0016] (0049,           scopeBegin) {{}
   3      return;
          [0003, 0005] (0020,              funcRtn) {return}
          [0003, 0011] (0021,            semicolon) {;}
   4    } elif(num == 1) {
          [0004, 0003] (0050,             scopeEnd) {}}
          [0004, 0005] (0017,              cmdElif) {elif}
          [0004, 0009] (0045,           paramBegin) {(}
          [0004, 0010] (0001,           identifier) {num}
          [0004, 0014] (0029,             opEquals) {==}
          [0004, 0017] (0008,               intVal) {1}
          [0004, 0018] (0046,             paramEnd) {)}
          [0004, 0020] (0049,           scopeBegin) {{}
   5      print("0");
          [0005, 0005] (0044,            funcPrint) {print}
          [0005, 0010] (0045,           paramBegin) {(}
          [0005, 0011] (0012,            stringVal) {"0"}
          [0005, 0014] (0046,             paramEnd) {)}
          [0005, 0015] (0021,            semicolon) {;}
   6      return;
          [0006, 0005] (0020,              funcRtn) {return}
          [0006, 0011] (0021,            semicolon) {;}
   7    } elif(num == 2) {
          [0007, 0003] (0050,             scopeEnd) {}}
          [0007, 0005] (0017,              cmdElif) {elif}
          [0007, 0009] (0045,           paramBegin) {(}
          [0007, 0010] (0001,           identifier) {num}
          [0007, 0014] (0029,             opEquals) {==}
          [0007, 0017] (0008,               intVal) {2}
          [0007, 0018] (0046,             paramEnd) {)}
          [0007, 0020] (0049,           scopeBegin) {{}
   8      print("0, 1, 1");
          [0008, 0005] (0044,            funcPrint) {print}
          [0008, 0010] (0045,           paramBegin) {(}
          [0008, 0011] (0012,            stringVal) {"0, 1, 1"}
          [0008, 0020] (0046,             paramEnd) {)}
          [0008, 0021] (0021,            semicolon) {;}
   9      return;
          [0009, 0005] (0020,              funcRtn) {return}
          [0009, 0011] (0021,            semicolon) {;}
  10    }
          [0010, 0003] (0050,             scopeEnd) {}}
  11  
  12    int prev2number = 1;
          [0012, 0003] (0002,              typeInt) {int}
          [0012, 0007] (0001,           identifier) {prev2number}
          [0012, 0019] (0028,                opAtt) {=}
          [0012, 0021] (0008,               intVal) {1}
          [0012, 0022] (0021,            semicolon) {;}
  13    int prev1number = 1;
          [0013, 0003] (0002,              typeInt) {int}
          [0013, 0007] (0001,           identifier) {prev1number}
          [0013, 0019] (0028,                opAtt) {=}
          [0013, 0021] (0008,               intVal) {1}
          [0013, 0022] (0021,            semicolon) {;}
  14    int numberToPrint = prev2number + prev1number;
          [0014, 0003] (0002,              typeInt) {int}
          [0014, 0007] (0001,           identifier) {numberToPrint}
          [0014, 0021] (0028,                opAtt) {=}
          [0014, 0023] (0001,           identifier) {prev2number}
          [0014, 0035] (0035,                opAdd) {+}
          [0014, 0037] (0001,           identifier) {prev1number}
          [0014, 0048] (0021,            semicolon) {;}
  15  
  16    while(numberToPrint < num) {
          [0016, 0003] (0015,             cmdWhile) {while}
          [0016, 0008] (0045,           paramBegin) {(}
          [0016, 0009] (0001,           identifier) {numberToPrint}
          [0016, 0023] (0032,           opLessThan) {<}
          [0016, 0025] (0001,           identifier) {num}
          [0016, 0028] (0046,             paramEnd) {)}
          [0016, 0030] (0049,           scopeBegin) {{}
  17      print(", %d", numberToPrint);
          [0017, 0005] (0044,            funcPrint) {print}
          [0017, 0010] (0045,           paramBegin) {(}
          [0017, 0011] (0012,            stringVal) {", %d"}
          [0017, 0017] (0022,             commaSep) {,}
          [0017, 0019] (0001,           identifier) {numberToPrint}
          [0017, 0032] (0046,             paramEnd) {)}
          [0017, 0033] (0021,            semicolon) {;}
  18      prev2number = prev1number;
          [0018, 0005] (0001,           identifier) {prev2number}
          [0018, 0017] (0028,                opAtt) {=}
          [0018, 0019] (0001,           identifier) {prev1number}
          [0018, 0030] (0021,            semicolon) {;}
  19      prev1number = numberToPrint;
          [0019, 0005] (0001,           identifier) {prev1number}
          [0019, 0017] (0028,                opAtt) {=}
          [0019, 0019] (0001,           identifier) {numberToPrint}
          [0019, 0032] (0021,            semicolon) {;}
  20      numberToPrint = prev1number + prev2number;
          [0020, 0005] (0001,           identifier) {numberToPrint}
          [0020, 0019] (0028,                opAtt) {=}
          [0020, 0021] (0001,           identifier) {prev1number}
          [0020, 0033] (0035,                opAdd) {+}
          [0020, 0035] (0001,           identifier) {prev2number}
          [0020, 0046] (0021,            semicolon) {;}
  21    }
          [0021, 0003] (0050,             scopeEnd) {}}
  22  }
          [0022, 0001] (0050,             scopeEnd) {}}
  23  
  24  int function main() {
          [0024, 0001] (0002,              typeInt) {int}
          [0024, 0005] (0019,             funcDecl) {function}
          [0024, 0014] (0013,                 main) {main}
          [0024, 0018] (0045,           paramBegin) {(}
          [0024, 0019] (0046,             paramEnd) {)}
          [0024, 0021] (0049,           scopeBegin) {{}
  25    int num;
          [0025, 0003] (0002,              typeInt) {int}
          [0025, 0007] (0001,           identifier) {num}
          [0025, 0010] (0021,            semicolon) {;}
  26    input(num);
          [0026, 0003] (0043,             funcRead) {input}
          [0026, 0008] (0045,           paramBegin) {(}
          [0026, 0009] (0001,           identifier) {num}
          [0026, 0012] (0046,             paramEnd) {)}
          [0026, 0013] (0021,            semicolon) {;}
  27    fibonacci(num);
          [0027, 0003] (0001,           identifier) {fibonacci}
          [0027, 0012] (0045,           paramBegin) {(}
          [0027, 0013] (0001,           identifier) {num}
          [0027, 0016] (0046,             paramEnd) {)}
          [0027, 0017] (0021,            semicolon) {;}
  28    return 0;
          [0028, 0003] (0020,              funcRtn) {return}
          [0028, 0010] (0008,               intVal) {0}
          [0028, 0011] (0021,            semicolon) {;}
  29  }
          [0029, 0001] (0050,             scopeEnd) {}}
  30  EOF
          [0030, 0001] (0052,                  EOF) {}
