S      = 'typeInt' SR 
      | NotIntType Decl S
      | 'typeVoid' DeclFun S
      | EPSILON


SR =  'funcDecl' SAux
    | DeclArrOpc 'funcDecl' 'identifier' DeclFun S
    | DeclArrOpc 'identifier' DeclVar S
    | 'identifier' DeclVar S

SAux = 'main' Main
     | 'identifier' DeclFun S

NotIntType = 'typeFloat'
                | 'typeString'
                | 'typeChar'
                | 'typeBool'

Decl = DeclArrOpc 'funcDecl' DeclFun
    | DeclArrOpc'identifier' DeclVar

DeclFun = '(' Params ')' Body   

VarType  = 'typeInt' 
            | 'typeFloat'
                | 'typeString'
                | 'typeChar'
                | 'typeBool'

DeclArrOpc = '[' ArrSizeOpc ']'
                     | EPSILON

ArrSizeOpc = ArrSizeObg 
                    | EPSILON

ArrSizeObg = 'identifier'
            | 'intVal'            

Params = VarType 'identifier' ArrOpc Paramsx
            | EPSILON

ArrOpc = '[' ArrSizeObg ']' 
        | EPSILON

Paramsx = ',' VarType 'identifier' ArrOpc Paramsx
        | EPSILON

Body = '{' Content '}' 

Content = Command Content  
              | DeclVar Content
              | 'identifier' '(' ParamsCall ')' ';' Content
              | 'funcRtn' Rtn ';'
              | LAttr ';' Content
              | EPSILON

Command = 'cmdIf' '(' Eb ')' Body LElif CmdElse
                  | 'cmdWhile' '(' Eb ')' Body
                  | 'cmdFor' 'identifier' '=' '(' Ea ',' Ea ',' Ea ')' Body
                  | 'funcRead' '(' LIdentfier ')' ';'
                  | 'funcPrint' '(' 'stringVal' PrintParams ')' ';'


CmdElse = 'cmdElse' Body
        | EPSILON

LElif = 'cmdElif' Body LElif
        | EPSILON

LIdentfier = 'identifier' LIdentfierx
                 | EPSILON

LIdentfierx = ',' 'identifier LIdentfierx
            | EPSILON

PrintParams = ',' Eb PrintParams 
                     | EPSILON  

DeclVar = LVar ';'  
               
LVar    = Var LVarx     
        | EPSILON

LVarx = ',' Var LVarx
    |EPSILON

Var = 'identifier' '=' Ec     
       | 'identifier'
       | 'identifier' DeclArrObg

ParamsCall = Ec ParamsCallx
            | EPSILON

ParamsCallx = ',' Ec ParamsCallx
            |EPSILON

Rtn = Ec   
       | EPSILON (Caso void)

LAttr = 'identifier' '=' Ec LAttrx
      | 'identifier' '[' Ea ']' '=' Ec LAttrx

LAttrx = ',' identifier '=' Ec LAttrx
        | ',' '[' Ea ']' '=' Ec LAttrx
        |EPSILON

Main = '(' ')' Body   

Ec          = Eb Ecx

Ecx = 'opConcat' Eb Ecx
    | EPSILON

Eb          = Tb Ebx

Ebx = 'opOr' Tb Ebx
    | EPSILON

Tb         = Fb Tbx

Tbx = 'opAnd' Fb Tbx
    | EPSILON

Fb  = 'opNot' Fb
    | Ra Fbx

Fbx = 'opGtrThan' Ra Fbx
    | 'opLessThan' Ra Fbx
    | 'opGtrEqual' Ra Fbx
    | 'opLessEq' Ra Fbx
    | EPSILON

Ra          = Ea Rax

Rax = 'opEquals' Ea Rax
    | 'opDiff' Ea Rax
    | EPSILON              

Ea          = Ta Eax

Eax = 'opAdd' Ta Eax
    | 'opSub' Ta Eax
    | EPSILON

Ta          = Fa Tax

Tax = 'opMult' Fa Tax
    | 'opDiv' Fa Eax
    | 'opMod' Fa Eax
    | EPSILON               

Fa          = '(' Ec ')'   
               | 'opUnaryNeg' Fa        
               | VarOrFunc
               | 'intVal'
               | 'floatVal'
               | 'stringVal'
               | 'charVal'
               | 'boolVal'


VarOrFunc = 'identifier' VarOrFuncx

VarOrFuncx = '[' Ea ']'
                | '(' ParamsCall ')'
                |EPSILON
