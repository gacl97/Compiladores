   1  void function fibonacci(int qnt) {

          [0001, 0001] (0007,             typeVoid) {void}
          [0001, 0006] (0019,             funcDecl) {function}
          [0001, 0015] (0001,           identifier) {fibonacci}
          [0001, 0024] (0045,           paramBegin) {(}
          [0001, 0025] (0002,              typeInt) {int}
          [0001, 0029] (0001,           identifier) {qnt}
          [0001, 0032] (0046,             paramEnd) {)}
          [0001, 0034] (0049,           scopeBegin) {{}
   2  

   3    if(qnt == 1) {

          [0003, 0003] (0016,                cmdIf) {if}
          [0003, 0005] (0045,           paramBegin) {(}
          [0003, 0006] (0001,           identifier) {qnt}
          [0003, 0010] (0029,             opEquals) {==}
          [0003, 0013] (0008,               intVal) {1}
          [0003, 0014] (0046,             paramEnd) {)}
          [0003, 0016] (0049,           scopeBegin) {{}
   4      print("0");

          [0004, 0005] (0044,            funcPrint) {print}
          [0004, 0010] (0045,           paramBegin) {(}
          [0004, 0011] (0012,            stringVal) {"0"}
          [0004, 0014] (0046,             paramEnd) {)}
          [0004, 0015] (0021,            semicolon) {;}
   5    } elif(qnt >= 2) {

          [0005, 0003] (0050,             scopeEnd) {}}
          [0005, 0005] (0017,              cmdElif) {elif}
          [0005, 0009] (0045,           paramBegin) {(}
          [0005, 0010] (0001,           identifier) {qnt}
          [0005, 0014] (0033,           opGtrEqual) {>=}
          [0005, 0017] (0008,               intVal) {2}
          [0005, 0018] (0046,             paramEnd) {)}
          [0005, 0020] (0049,           scopeBegin) {{}
   6      print("0, 1");

          [0006, 0005] (0044,            funcPrint) {print}
          [0006, 0010] (0045,           paramBegin) {(}
          [0006, 0011] (0012,            stringVal) {"0, 1"}
          [0006, 0017] (0046,             paramEnd) {)}
          [0006, 0018] (0021,            semicolon) {;}
   7    }

          [0007, 0003] (0050,             scopeEnd) {}}
   8  

   9    int i = 2;

          [0009, 0003] (0002,              typeInt) {int}
          [0009, 0007] (0001,           identifier) {i}
          [0009, 0009] (0028,                opAtt) {=}
          [0009, 0011] (0008,               intVal) {2}
          [0009, 0012] (0021,            semicolon) {;}
  10    int numberToPrint;

          [0010, 0003] (0002,              typeInt) {int}
          [0010, 0007] (0001,           identifier) {numberToPrint}
          [0010, 0020] (0021,            semicolon) {;}
  11    int prev2number = 0;

          [0011, 0003] (0002,              typeInt) {int}
          [0011, 0007] (0001,           identifier) {prev2number}
          [0011, 0019] (0028,                opAtt) {=}
          [0011, 0021] (0008,               intVal) {0}
          [0011, 0022] (0021,            semicolon) {;}
  12    int prev1number = 1;

          [0012, 0003] (0002,              typeInt) {int}
          [0012, 0007] (0001,           identifier) {prev1number}
          [0012, 0019] (0028,                opAtt) {=}
          [0012, 0021] (0008,               intVal) {1}
          [0012, 0022] (0021,            semicolon) {;}
  13  

  14    while(i < qnt) {

          [0014, 0003] (0015,             cmdWhile) {while}
          [0014, 0008] (0045,           paramBegin) {(}
          [0014, 0009] (0001,           identifier) {i}
          [0014, 0011] (0032,           opLessThan) {<}
          [0014, 0013] (0001,           identifier) {qnt}
          [0014, 0016] (0046,             paramEnd) {)}
          [0014, 0018] (0049,           scopeBegin) {{}
  15      numberToPrint = prev1number + prev2number;

          [0015, 0005] (0001,           identifier) {numberToPrint}
          [0015, 0019] (0028,                opAtt) {=}
          [0015, 0021] (0001,           identifier) {prev1number}
          [0015, 0033] (0035,                opAdd) {+}
          [0015, 0035] (0001,           identifier) {prev2number}
          [0015, 0046] (0021,            semicolon) {;}
  16      prev2number = prev1number;

          [0016, 0005] (0001,           identifier) {prev2number}
          [0016, 0017] (0028,                opAtt) {=}
          [0016, 0019] (0001,           identifier) {prev1number}
          [0016, 0030] (0021,            semicolon) {;}
  17      prev1number = numberToPrint;

          [0017, 0005] (0001,           identifier) {prev1number}
          [0017, 0017] (0028,                opAtt) {=}
          [0017, 0019] (0001,           identifier) {numberToPrint}
          [0017, 0032] (0021,            semicolon) {;}
  18      print(", %d", numberToPrint);

          [0018, 0005] (0044,            funcPrint) {print}
          [0018, 0010] (0045,           paramBegin) {(}
          [0018, 0011] (0012,            stringVal) {", %d"}
          [0018, 0017] (0022,             commaSep) {,}
          [0018, 0019] (0001,           identifier) {numberToPrint}
          [0018, 0032] (0046,             paramEnd) {)}
          [0018, 0033] (0021,            semicolon) {;}
  19      i = i + 1;

          [0019, 0005] (0001,           identifier) {i}
          [0019, 0007] (0028,                opAtt) {=}
          [0019, 0009] (0001,           identifier) {i}
          [0019, 0011] (0035,                opAdd) {+}
          [0019, 0013] (0008,               intVal) {1}
          [0019, 0014] (0021,            semicolon) {;}
  20    }

          [0020, 0003] (0050,             scopeEnd) {}}
  21  }

          [0021, 0001] (0050,             scopeEnd) {}}
  22  

  23  int main() {

          [0023, 0001] (0002,              typeInt) {int}
          [0023, 0005] (0013,                 main) {main}
          [0023, 0009] (0045,           paramBegin) {(}
          [0023, 0010] (0046,             paramEnd) {)}
          [0023, 0012] (0049,           scopeBegin) {{}
  24    int qnt;

          [0024, 0003] (0002,              typeInt) {int}
          [0024, 0007] (0001,           identifier) {qnt}
          [0024, 0010] (0021,            semicolon) {;}
  25    input(qnt);

          [0025, 0003] (0043,             funcRead) {input}
          [0025, 0008] (0045,           paramBegin) {(}
          [0025, 0009] (0001,           identifier) {qnt}
          [0025, 0012] (0046,             paramEnd) {)}
          [0025, 0013] (0021,            semicolon) {;}
  26    fibonacci(qnt);

          [0026, 0003] (0001,           identifier) {fibonacci}
          [0026, 0012] (0045,           paramBegin) {(}
          [0026, 0013] (0001,           identifier) {qnt}
          [0026, 0016] (0046,             paramEnd) {)}
          [0026, 0017] (0021,            semicolon) {;}
  27  }
          [0027, 0001] (0050,             scopeEnd) {}}
  28  EOF
          [0028, 0001] (0052,                  EOF) {}
